{
  "_from": "password-hash-and-salt",
  "_id": "password-hash-and-salt@0.1.4",
  "_inBundle": false,
  "_integrity": "sha1-+4e+F5tCsI5JMdiIOROVI43xgLQ=",
  "_location": "/password-hash-and-salt",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "password-hash-and-salt",
    "fetchSpec": "latest",
    "name": "password-hash-and-salt",
    "raw": "password-hash-and-salt",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/password-hash-and-salt/-/password-hash-and-salt-0.1.4.tgz",
  "_shasum": "fb87be179b42b08e4931d888391395238df180b4",
  "_shrinkwrap": null,
  "_spec": "password-hash-and-salt",
  "_where": "/media/carlox/Datos/Datos/Tecnologo/TSE2019/TseLabWeb",
  "author": {
    "email": "florian.heinemann@gmail.com",
    "name": "Florian Heinemann",
    "url": "http://twitter.com/florian__h"
  },
  "bugs": {
    "url": "https://github.com/florianheinemann/password-hash-and-salt/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "Simple, safe and straight-forward password hashing / salting for node.js",
  "devDependencies": {
    "chai": "~1.9.1",
    "grunt": "~0.4.4",
    "grunt-mocha-test": "~0.10.2",
    "mocha": "~1.18.2"
  },
  "homepage": "https://github.com/florianheinemann/password-hash-and-salt",
  "keywords": [
    "crypto",
    "hash",
    "node",
    "node.js",
    "password",
    "pbkdf2",
    "salt"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "password-hash-and-salt",
  "optionalDependencies": {},
  "readme": "password-hash-and-salt\n======================\n\nThis module provides straight-forward password hashing for node.js applications using default settings considered to be safe.\n\n### Usage\n\nFirst, install the module:\n\n`$ npm install password-hash-and-salt --save`\n\nAfterwards, usage is as simple as shown in the following example:\n```javascript\nvar password = require('password-hash-and-salt');\n\nvar myuser = [];\n\n// Creating hash and salt\npassword('mysecret').hash(function(error, hash) {\n\tif(error)\n\t\tthrow new Error('Something went wrong!');\n\n\t// Store hash (incl. algorithm, iterations, and salt)\n\tmyuser.hash = hash;\n\n\t// Verifying a hash\n\tpassword('hack').verifyAgainst(myuser.hash, function(error, verified) {\n\t\tif(error)\n\t\t\tthrow new Error('Something went wrong!');\n\t\tif(!verified) {\n\t\t\tconsole.log(\"Don't try! We got you!\");\n\t\t} else {\n\t\t\tconsole.log(\"The secret is...\");\n\t\t}\n\t});\n})\n\n```\n\n### Crypto\npassword-hash-and-salt uses node.js' internal crypto module. Hashes are generated with pbkdf2 using 10,000 iterations.\n\n### Created hash\nThe created hash is of 270 characters length and is of the following format:\n`pbkdf2$10000$hash$salt`\n\nThis allows for future upgrades of the algorithm and/or increased number of iterations in future version. It also simplifies storage as no dedicated database field for the salt is required.\n\n### Credits and License\nexpress-sslify is licensed under the MIT license. If you'd like to be informed about new projects follow   [@TheSumOfAll](http://twitter.com/TheSumOfAll/).\n\nCopyright (c) 2013-2014 Florian Heinemann\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/florianheinemann/password-hash-and-salt.git"
  },
  "scripts": {
    "test": "grunt test"
  },
  "version": "0.1.4"
}
